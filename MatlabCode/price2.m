function price2(N_EV)

%Load Aggregator data
dataName='/Users/raja/Documents/Thesis/ADMM_matlab/Aggregator/aggregatorD.mat';
agr_params= load(dataName); % data required by the agregator

N=N_EV+1;                       % Number of agents
deltaT=15*60;                   % Time slot duration [sec]
T= 24*3600/deltaT ;             % Number of time slots

price = agr_params.price;       %Price
p=repmat(price,4,1);
p=p(:) / (3600*1000) * deltaT;  % scaling of price in EUR/kW
agr_params.p=p;

delta=  mean(p)/mean(agr_params.D);

agr_params.re=   60*ones(T,1);  % maximal aviliable load 1GW 
agr_params.xamin=-100e3*ones(T,1);

x_max=20;                                 % Max charging power for greedy need to add some 1e-3 or someting for it to be feasible
x_min=-20;                                % Min charging power
rho =0.01;
alpha=0.05/3600 * 15*60 / delta ;
gamma =0;

%xmean=zeros(T,1);       % Avarage of all agent profiles 96*1
%u = zeros(T,1);
%x = zeros(T,N);
%xold= x;

u = [8628342.168372562 8615930.108071055 8595678.851789648 8546147.863514941 8254405.819963853 8220352.218623818 8210201.464854974 8222328.768037554 8097052.386128006 8089347.1934981905 8083668.801538392 8060184.714436214 7980553.223648944 7988358.918791323 7997136.138221809 8009229.940566868 8048794.429679095 8065377.34425196 8086566.623983953 8069950.208573568 8491424.245424489 8508677.176747771 8510687.226999028 8513367.294000702 9468526.264764244 9480000.301615164 9484171.100264171 9472981.820532177 1.0172680183209004E7 1.0204773928920398E7 1.0200871021775544E7 1.0201943048576213E7 1.0337386934673367E7 1.0367403685092127E7 1.0365125628140703E7 1.0382763819095476E7 1.0506800670016749E7 1.0547939698492462E7 1.0573015075376883E7 1.0611055276381908E7 1.079463986599665E7 1.0832378559463985E7 1.0871691792294806E7 1.0896130653266331E7 1.0894790619765492E7 1.0912596314907871E7 1.0915678391959798E7 1.0934556113902846E7 1.0885494137353433E7 1.0885293132328307E7 1.0857822445561139E7 1.0839195979899498E7 1.0728911222780569E7 1.0709798994974874E7 1.0658475711892797E7 1.0620201005025124E7 1.0530435510887772E7 1.0487872696817419E7 1.0435544388609715E7 1.0362663316582913E7 1.0289162479061976E7 1.0233819095477385E7 1.0189061976549413E7 1.0151256281407034E7 1.0375845896147402E7 1.0367035235453062E7 1.0369212845514271E7 1.0407202795263015E7 1.07173367986131E7 1.0748743833788978E7 1.0766365330958659E7 1.0796181076352293E7 1.0808894644191489E7 1.0812713739668876E7 1.0811021947374068E7 1.0804891294107737E7 1.059710234938412E7 1.0590603186905056E7 1.0589514409685627E7 1.0593283253906732E7 1.0196130825096011E7 1.0199196151729178E7 1.0190971696117787E7 1.0177303354409244E7 9587253.232938448 9582697.277250284 9566214.865189983 9555930.108071055 9377018.885290485 9362127.763012428 9350620.225323986 9346667.126496514 8860737.47825531 8846801.129846599 8848643.675910251 8839765.953967202]';
xmean=[8628342.168372562 8615930.108071055 8595678.851789648 8546147.863514941 8254405.819963853 8220352.218623818 8210201.464854974 8222328.768037554 8097052.386128006 8089347.1934981905 8083668.801538392 8060184.714436214 7980553.223648944 7988358.918791323 7997136.138221809 8009229.940566868 8048794.429679095 8065377.34425196 8086566.623983953 8069950.208573568 8491424.245424489 8508677.176747771 8510687.226999028 8513367.294000702 9468526.264764244 9480000.301615164 9484171.100264171 9472981.820532177 1.0172680183209004E7 1.0204773928920398E7 1.0200871021775544E7 1.0201943048576213E7 1.0337386934673367E7 1.0367403685092127E7 1.0365125628140703E7 1.0382763819095476E7 1.0506800670016749E7 1.0547939698492462E7 1.0573015075376883E7 1.0611055276381908E7 1.079463986599665E7 1.0832378559463985E7 1.0871691792294806E7 1.0896130653266331E7 1.0894790619765492E7 1.0912596314907871E7 1.0915678391959798E7 1.0934556113902846E7 1.0885494137353433E7 1.0885293132328307E7 1.0857822445561139E7 1.0839195979899498E7 1.0728911222780569E7 1.0709798994974874E7 1.0658475711892797E7 1.0620201005025124E7 1.0530435510887772E7 1.0487872696817419E7 1.0435544388609715E7 1.0362663316582913E7 1.0289162479061976E7 1.0233819095477385E7 1.0189061976549413E7 1.0151256281407034E7 1.0375845896147402E7 1.0367035235453062E7 1.0369212845514271E7 1.0407202795263015E7 1.07173367986131E7 1.0748743833788978E7 1.0766365330958659E7 1.0796181076352293E7 1.0808894644191489E7 1.0812713739668876E7 1.0811021947374068E7 1.0804891294107737E7 1.059710234938412E7 1.0590603186905056E7 1.0589514409685627E7 1.0593283253906732E7 1.0196130825096011E7 1.0199196151729178E7 1.0190971696117787E7 1.0177303354409244E7 9587253.232938448 9582697.277250284 9566214.865189983 9555930.108071055 9377018.885290485 9362127.763012428 9350620.225323986 9346667.126496514 8860737.47825531 8846801.129846599 8848643.675910251 8839765.953967202]';
%xold = [0.35744198836475194 0.35744198836494157 0.35744198836513713 0.3574419883653391 0.35744198836554786 0.3574419883657639 0.3574419883659878 0.35744198836621993 0.3574419883664611 0.3574419883667123 0.3574419883669741 0.35744198836724783 0.3574419883675344 0.3574419883678353 0.35744198836815233 0.3574419883684875 0.3574419883688432 0.3574419883692225 0.3574419883696291 0.35744198837006774 0.3574419883705449 0.3574419883710686 0.35744198837165053 0.357441988372307 0.35744198837306246 0.3574419883739562 0.3574419883750569 0.35744198837650204 0.3574419883786348 0.35744198838282853 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 0.3574419883608457 0.3574419883608457 0.3574419883609625 0.3574419883610536 0.3574419883611469 0.35744198836124247 0.35744198836134033 0.3574419883614405 0.3574419883615431 0.3574419883616482 0.35744198836175584 0.357441988361866 0.3574419883619788 0.35744198836209434 0.35744198836221264 0.3574419883623338 0.35744198836245783 0.35744198836258495 0.3574419883627151 0.3574419883628485 0.35744198836298535 0.3574419883631256 0.35744198836326935 0.3574419883634169 0.3574419883635682 0.35744198836372376 0.35744198836388336 0.3574419883640474 0.357441988364216 0.3574419883643895 0.3574419883645681]';
xold=[0.3337341013815246 0.33373410138174076 0.3337341013819653 0.333734101382199 0.33373410138244247 0.3337341013826967 0.33373410138296256 0.3337341013832414 0.33373410138353443 0.3337341013838434 0.33373410138417003 0.33373410138451676 0.3337341013848863 0.3337341013852821 0.33373410138570825 0.3337341013861705 0.3337341013866756 0.3337341013872331 0.333734101387856 0.3337341013885627 0.33373410138938087 0.333734101390355 0.3337341013915627 0.33373410139315907 0.3337341013955324 0.3337341014002348 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 -0.0 0.33373410137734366 0.3337341013773513 0.3337341013774749 0.3337341013776006 0.33373410137770243 0.3337341013778065 0.33373410137791326 0.33373410137802256 0.3337341013781345 0.3337341013782491 0.3337341013783665 0.33373410137848686 0.33373410137861026 0.3337341013787367 0.3337341013788665 0.3337341013789996 0.3337341013791363 0.33373410137927645 0.3337341013794205 0.33373410137956844 0.33373410137972065 0.3337341013798771 0.3337341013800382 0.33373410138020404 0.33373410138037496 0.3337341013805511 0.333734101380733 0.3337341013809209 0.3337341013811152 0.33373410138131626]';

name=['ADMM_matlab/EVs/home/2.mat'];
data=load(name) ;

%assign data
A=data.A;
R=data.R;
d=data.d;
B=data.B;
Smax = data.S_max;
Smin = data.S_min;

%Contraints
Aineq=[B;-B];
bineq=[Smax+1e-4; -(Smin-1e-4)];
lb=d'*x_min;
ub=d'*x_max;
Aeq=A ;
beq=R';

disp('Printing variables')
disp(gamma)
disp(alpha)
disp(rho)
disp(xold)
disp(xmean)
disp(u)
disp('END')


%CVX Implementation
cvx_begin
        variable x_i(T)
         
        %minimize( (gamma*alpha*sum(x_i.*x_i)) + (rho/2 * norm(x_i - xold(:,1) + xmean + u))  )
         minimize( (gamma*alpha*sum(x_i.*x_i)) + (rho/2 * sum((x_i - xold(:,1) + xmean + u).*(x_i - xold(:,1) + xmean + u)))  )
         
         subject to
             Aineq * x_i <= bineq
             Aeq * x_i == beq 
             lb <= x_i <= ub
 cvx_end
 
 disp(x_i)
 disp(sum(x_i))


%YALMIP IMPLEMENTATION
%  x_i= sdpvar(T,1,'full');
%     
%  Cost= (gamma*alpha*sum(x_i.*x_i)) + (rho/2 * sum((x_i - xold(:,1) + xmean + u).*(x_i - xold(:,1) + xmean + u)));
%  
%  Constraints=[Aineq * x_i <= bineq,Aeq * x_i == beq,lb <= x_i <= ub];
%  ops = sdpsettings('verbose',0);
%  %savecplexlp(Constraints, Cost, 'myEVCplex.mod');
%  sol=solvesdp(Constraints,Cost,ops);
%  if sol.problem == 0
%      x = double(x_i);
%      disp(x)
%  end


end


